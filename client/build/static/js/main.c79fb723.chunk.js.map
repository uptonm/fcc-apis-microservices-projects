{"version":3,"sources":["components/Timestamp.js","components/HeaderParser.js","components/UrlShortener.js","components/Landing.js","components/App.js","serviceWorker.js","index.js"],"names":["Timestamp","react_default","a","createElement","className","style","height","href","Component","HeaderParser","UrlShortener","state","url","shortenedUrl","handleChange","e","_this","setState","target","value","handleSubmit","_callee","regenerator_default","wrap","_context","prev","next","preventDefault","axios","post","sent","data","code","console","log","stop","onSubmit","this","bind","htmlFor","type","id","onChange","length","concat","Landing","class","App","BrowserRouter","NavLink","activeClassName","to","Route","exact","path","component","Boolean","window","location","hostname","match","ReactDOM","render","components_App","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.c79fb723.chunk.js","sourcesContent":["import React, { Component } from 'react';\n\nclass Timestamp extends Component {\n  render() {\n    return (\n      <div className=\"container\" style={{ height: '100vh' }}>\n        <h1 className=\"display-4 text-center\">API Project: Timestamp Microservice</h1>\n        <hr />\n        <h2>User Stories (WIP):</h2>\n        <ol>\n          <li>The API endpoint is GET [project_url]/api/timestamp/:date_string?</li>\n          <li>\n            A date string is valid if can be successfully parsed by new Date(date_string). Note that\n            the unix timestamp needs to be an integer (not a string) specifying milliseconds. In our\n            test we will use date strings compliant with ISO-8601 (e.g. \"2016-11-20\") because this\n            will ensure an UTC timestamp.\n          </li>\n          <li>\n            If the date string is empty it should be equivalent to trigger new Date(), i.e. the\n            service uses the current timestamp.\n          </li>\n          <li>\n            If the date string is valid the api returns a JSON having the structure\n            <br />\n            <code>{`{\"unix\": <date.getTime()>, \"utc\" : <date.toUTCString()> }`}</code>\n            <br />\n            e.g. <code>{`{\"unix\": 1479663089000 ,\"utc\": \"Sun, 20 Nov 2016 17:31:29 GMT\"}`}</code>\n          </li>\n          <li>\n            If the date string is invalid the api returns a JSON having the structure\n            <br />\n            <code>{`{\"error\" : \"Invalid Date\" }`}</code>\n          </li>\n        </ol>\n        <div className=\"container text-center\">\n          <h3>Example Usage:</h3>\n          <a href=\"/api/timestamp/2015-12-25\">\n            <code>[project url]/api/timestamp/2015-12-25</code>\n          </a>\n          <br />\n          <a href=\"/api/timestamp/1450137600\">\n            <code>[project url]/api/timestamp/1450137600</code>\n          </a>\n          <br />\n          <br />\n          <h3>Example Output:</h3>\n          <code>{`{\"unix\": 1451001600000, \"utc\":\"Fri, 25 Dec 2015 00:00:00 GMT\"}`}</code>\n        </div>\n      </div>\n    );\n  }\n}\n\nexport default Timestamp;\n","import React, { Component } from 'react';\n\nclass HeaderParser extends Component {\n  render() {\n    return (\n      <div className=\"container\">\n        <h1 className=\"display-4 text-center\">API Project: Request Header Parser Microservice</h1>\n        <hr />\n        <h2>User Story:</h2>\n        <ol>\n          <li>The API endpoint is GET [project_url]/api/timestamp/:date_string?</li>\n          <li>\n            I can get the IP address, preferred languages (from header <code>Accept-Language</code>)\n            and system infos (from header <code>User-Agent</code>) for my device.\n          </li>\n        </ol>\n        <div className=\"container text-center\">\n          <h3>Example Usage:</h3>\n          <a href=\"/api/whoami\">\n            <code>[project url]/api/whoami</code>\n          </a>\n          <br />\n          <br />\n          <h3>Example Output:</h3>\n          <code>{`{\"ipaddress\":\"159.20.14.100\",\"language\":\"en-US,en;q=0.5\",\n\"software\":\"Mozilla/5.0 (X11; Ubuntu; Linux x86_64; rv:50.0) Gecko/20100101 Firefox/50.0\"}`}</code>\n        </div>\n      </div>\n    );\n  }\n}\n\nexport default HeaderParser;\n","import React, { Component } from 'react';\nimport axios from 'axios';\n\nclass UrlShortener extends Component {\n  state = {\n    url: '',\n    shortenedUrl: ''\n  };\n\n  handleChange = e => {\n    this.setState({ url: e.target.value });\n  };\n\n  handleSubmit = async e => {\n    e.preventDefault();\n    const url = await axios.post('/api/url', { url: this.state.url });\n    this.setState({ shortenedUrl: url.data.code }, () => {\n      console.log(this.state);\n    });\n  };\n\n  render() {\n    return (\n      <div className=\"container\">\n        <h1 className=\"display-4 text-center\">API Project: URL Shortener Microservice</h1>\n        <hr />\n        <h2>User Story:</h2>\n        <ol>\n          <li>\n            I can POST a URL to <code>[project_url]/api/shorturl/new</code> and I will receive a\n            shortened URL in the JSON response.\n            <br />\n            Example :<code>{`\\t{\"original_url\": \"www.google.com\",\"short_url\":1}`}</code>\n          </li>\n          <li>\n            If I pass an invalid URL that doesn't follow the{' '}\n            <code>http(s)://www.example.com(/more/routes)</code>\n            format, the JSON response will contain an error like{' '}\n            <code>{`{\"error\":\"invalid URL\"}`}</code>\n            <br />\n            HINT: to be sure that the submitted url points to a valid site you can use the function\n            dns.lookup(host, cb) from the dns core module.\n          </li>\n          <li>When I visit the shortened URL, it will redirect me to my original link.</li>\n        </ol>\n        <div className=\"container text-center\">\n          <h3>Short URL Creation:</h3>\n          <span>\n            example: <code>POST [project_url]/api/url</code> - <code>https://google.com</code>\n          </span>\n          <br />\n          <br />\n          <form className=\"bd-example\" onSubmit={this.handleSubmit.bind(this)}>\n            <div className=\"form-group\">\n              <label htmlFor=\"url\">Url to Shorten: </label>\n              <input\n                className=\"form-control\"\n                type=\"text\"\n                id=\"url\"\n                value={this.state.url}\n                onChange={this.handleChange.bind(this)}\n              />\n            </div>\n            {this.state.shortenedUrl.length > 0 ? (\n              <h3>\n                <a href={`api/url/${this.state.shortenedUrl}`}>{`[project_url]/api/url${\n                  this.state.shortenedUrl\n                }`}</a>\n              </h3>\n            ) : (\n              ''\n            )}\n            <button className=\"btn btn-lg btn-primary\" type=\"submit\">\n              Submit\n            </button>\n          </form>\n          <br />\n          <h3>Example Usage:</h3>\n          <a href=\"/api/url/9a31e9\">\n            <code>[this_project_url]/api/url/9a31e9</code>\n          </a>\n          <br />\n          <br />\n          <h3>Will Redirect To:</h3>\n          <code>https://google.com</code>\n        </div>\n      </div>\n    );\n  }\n}\n\nexport default UrlShortener;\n","import React from 'react';\n\nexport default () => {\n  return (\n    <div>\n      <div className=\"jumbotron\">\n        <h1 className=\"display-4\">Introduction to the APIs and Microservices Projects</h1>\n        <p class=\"lead\">\n          This is a simple hero unit, a simple jumbotron-style component for calling extra attention\n          to featured content or information.\n        </p>\n        <hr class=\"my-4\" />\n      </div>\n    </div>\n  );\n};\n","import React, { Component } from 'react';\nimport { BrowserRouter as Router, Route, NavLink } from 'react-router-dom';\n\nimport './index.css';\nimport Timestamp from './Timestamp';\nimport HeaderParser from './HeaderParser';\nimport UrlShortener from './UrlShortener';\nimport Landing from './Landing';\n\nclass App extends Component {\n  render() {\n    return (\n      <div>\n        <Router>\n          <div>\n            <ul className=\"nav\">\n              <li className=\"nav-item\">\n                <NavLink className=\"nav-link\" activeClassName=\"active\" to=\"/timestamp\">\n                  Timestamp API\n                </NavLink>\n              </li>\n              <li className=\"nav-item\">\n                <NavLink className=\"nav-link\" activeClassName=\"nav-link active\" to=\"/headerparser\">\n                  Header Parser API\n                </NavLink>\n              </li>\n              <li className=\"nav-item\">\n                <NavLink className=\"nav-link\" activeClassName=\"nav-link active\" to=\"/url\">\n                  Url Shortener API\n                </NavLink>\n              </li>\n            </ul>\n            <Route exact path=\"/\" component={Landing} />\n            <Route path=\"/timestamp\" component={Timestamp} />\n            <Route path=\"/headerparser\" component={HeaderParser} />\n            <Route path=\"/url\" component={UrlShortener} />\n          </div>\n        </Router>\n        <footer className=\"footer\">\n          <span>\n            made with <i className=\"fas fa-heart\" /> for{' '}\n            <a href=\"https://freecodecamp.com\">freeCodeCamp</a>\n          </span>\n        </footer>\n      </div>\n    );\n  }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read http://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit http://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See http://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport App from './components/App';\nimport 'bootstrap/dist/css/bootstrap.min.css';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: http://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}